From 51686d06b472abf5c7804f197aef8f2edcc32a9d Mon Sep 17 00:00:00 2001
From: "lauren n. liberda" <lauren@selfisekai.rocks>
Date: Wed, 26 Jun 2024 18:01:17 +0200
Subject: [PATCH] Revert "Replace deprecated version of absl::HexStringToBytes
 in test programs and remaining quic/ tests"

this api is not yet present in abseil lts_202401.

This reverts commit a484a561d3d36beca0d4dc9f5d4a2c083be03e1f.
---
 .../web_transport_fingerprint_proof_verifier.cc | 10 ++--------
 quiche/quic/masque/masque_client_bin.cc         |  7 +------
 quiche/quic/masque/masque_server_backend.cc     |  5 +----
 quiche/quic/tools/crypto_message_printer_bin.cc |  6 +-----
 quiche/quic/tools/quic_packet_printer_bin.cc    |  6 +-----
 quiche/quic/tools/quic_toy_client.cc            | 17 ++++++++---------
 6 files changed, 14 insertions(+), 37 deletions(-)

diff --git a/net/third_party/quiche/src/quiche/quic/core/crypto/web_transport_fingerprint_proof_verifier.cc b/net/third_party/quiche/src/quiche/quic/core/crypto/web_transport_fingerprint_proof_verifier.cc
index a784fb6cb..1b1d5257d 100644
--- a/net/third_party/quiche/src/quiche/quic/core/crypto/web_transport_fingerprint_proof_verifier.cc
+++ b/net/third_party/quiche/src/quiche/quic/core/crypto/web_transport_fingerprint_proof_verifier.cc
@@ -21,7 +21,6 @@
 #include "quiche/quic/core/quic_types.h"
 #include "quiche/quic/core/quic_utils.h"
 #include "quiche/quic/platform/api/quic_bug_tracker.h"
-#include "quiche/quic/platform/api/quic_logging.h"
 #include "quiche/common/quiche_text_utils.h"
 
 namespace quic {
@@ -87,13 +86,8 @@ bool WebTransportFingerprintProofVerifier::AddFingerprint(
 
   std::string normalized =
       absl::StrReplaceAll(fingerprint.fingerprint, {{":", ""}});
-  std::string normalized_bytes;
-  if (!absl::HexStringToBytes(normalized, &normalized_bytes)) {
-    QUIC_DLOG(WARNING) << "Fingerprint hexadecimal is invalid";
-    return false;
-  }
-  hashes_.push_back(
-      WebTransportHash{fingerprint.algorithm, std::move(normalized_bytes)});
+  hashes_.push_back(WebTransportHash{fingerprint.algorithm,
+                                     absl::HexStringToBytes(normalized)});
   return true;
 }
 
diff --git a/net/third_party/quiche/src/quiche/quic/masque/masque_client_bin.cc b/net/third_party/quiche/src/quiche/quic/masque/masque_client_bin.cc
index ac350b557..2b7301a7e 100644
--- a/net/third_party/quiche/src/quiche/quic/masque/masque_client_bin.cc
+++ b/net/third_party/quiche/src/quiche/quic/masque/masque_client_bin.cc
@@ -282,12 +282,7 @@ int RunMasqueClient(int argc, char* argv[]) {
         QUIC_LOG(ERROR) << "Signature authentication key ID cannot be empty";
         return 1;
       }
-      if (!absl::HexStringToBytes(signature_auth_param_split[1],
-                                  &private_key_seed)) {
-        QUIC_LOG(ERROR) << "Signature authentication key hex value is invalid";
-        return 1;
-      }
-
+      private_key_seed = absl::HexStringToBytes(signature_auth_param_split[1]);
       if (private_key_seed.size() != kEd25519Rfc8032PrivateKeySize) {
         QUIC_LOG(ERROR)
             << "Invalid signature authentication private key length "
diff --git a/net/third_party/quiche/src/quiche/quic/masque/masque_server_backend.cc b/net/third_party/quiche/src/quiche/quic/masque/masque_server_backend.cc
index 66ca13c96..f4ff2e0ed 100644
--- a/net/third_party/quiche/src/quiche/quic/masque/masque_server_backend.cc
+++ b/net/third_party/quiche/src/quiche/quic/masque/masque_server_backend.cc
@@ -193,10 +193,7 @@ void MasqueServerBackend::SetSignatureAuth(absl::string_view signature_auth) {
     quiche::QuicheTextUtils::RemoveLeadingAndTrailingWhitespace(&kv[1]);
     SignatureAuthCredential credential;
     credential.key_id = std::string(kv[0]);
-    std::string public_key;
-    if (!absl::HexStringToBytes(kv[1], &public_key)) {
-      QUIC_LOG(FATAL) << "Invalid signature auth public key hex " << kv[1];
-    }
+    std::string public_key = absl::HexStringToBytes(kv[1]);
     if (public_key.size() != sizeof(credential.public_key)) {
       QUIC_LOG(FATAL) << "Invalid signature auth public key length "
                       << public_key.size();
diff --git a/net/third_party/quiche/src/quiche/quic/tools/crypto_message_printer_bin.cc b/net/third_party/quiche/src/quiche/quic/tools/crypto_message_printer_bin.cc
index ef0315e63..4f83a32bf 100644
--- a/net/third_party/quiche/src/quiche/quic/tools/crypto_message_printer_bin.cc
+++ b/net/third_party/quiche/src/quiche/quic/tools/crypto_message_printer_bin.cc
@@ -49,11 +49,7 @@ int main(int argc, char* argv[]) {
   quic::CryptoFramer framer;
   framer.set_visitor(&printer);
   framer.set_process_truncated_messages(true);
-  std::string input;
-  if (!absl::HexStringToBytes(messages[0], &input)) {
-    cerr << "Invalid hex string provided" << endl;
-    return 1;
-  }
+  std::string input = absl::HexStringToBytes(messages[0]);
   if (!framer.ProcessInput(input)) {
     return 1;
   }
diff --git a/net/third_party/quiche/src/quiche/quic/tools/quic_packet_printer_bin.cc b/net/third_party/quiche/src/quiche/quic/tools/quic_packet_printer_bin.cc
index 95d0d1d88..097fd2463 100644
--- a/net/third_party/quiche/src/quiche/quic/tools/quic_packet_printer_bin.cc
+++ b/net/third_party/quiche/src/quiche/quic/tools/quic_packet_printer_bin.cc
@@ -274,11 +274,7 @@ int main(int argc, char* argv[]) {
     quiche::QuichePrintCommandLineFlagHelp(usage);
     return 1;
   }
-  std::string hex;
-  if (!absl::HexStringToBytes(args[1], &hex)) {
-    std::cerr << "Invalid hex string" << std::endl;
-    return 1;
-  }
+  std::string hex = absl::HexStringToBytes(args[1]);
   quic::ParsedQuicVersionVector versions = quic::AllSupportedVersions();
   // Fake a time since we're not actually generating acks.
   quic::QuicTime start(quic::QuicTime::Zero());
diff --git a/net/third_party/quiche/src/quiche/quic/tools/quic_toy_client.cc b/net/third_party/quiche/src/quiche/quic/tools/quic_toy_client.cc
index 2fae8e549..791fdeb84 100644
--- a/net/third_party/quiche/src/quiche/quic/tools/quic_toy_client.cc
+++ b/net/third_party/quiche/src/quiche/quic/tools/quic_toy_client.cc
@@ -63,7 +63,6 @@
 #include "quiche/quic/tools/fake_proof_verifier.h"
 #include "quiche/quic/tools/quic_url.h"
 #include "quiche/common/platform/api/quiche_command_line_flags.h"
-#include "quiche/common/platform/api/quiche_logging.h"
 #include "quiche/common/quiche_text_utils.h"
 #include "quiche/spdy/core/http2_header_block.h"
 
@@ -368,10 +367,8 @@ int QuicToyClient::SendRequestsAndPrintResponses(
       << "The length of --server_connection_id must be even. It is "
       << server_connection_id_hex_string.size() << "-byte long.";
   if (!server_connection_id_hex_string.empty()) {
-    std::string server_connection_id_bytes;
-    QUICHE_CHECK(absl::HexStringToBytes(server_connection_id_hex_string,
-                                        &server_connection_id_bytes))
-        << "Failed to parse --server_connection_id hex string.";
+    const std::string server_connection_id_bytes =
+        absl::HexStringToBytes(server_connection_id_hex_string);
     client->set_server_connection_id_override(QuicConnectionId(
         server_connection_id_bytes.data(), server_connection_id_bytes.size()));
   }
@@ -431,9 +428,8 @@ int QuicToyClient::SendRequestsAndPrintResponses(
   if (!quiche::GetQuicheCommandLineFlag(FLAGS_body_hex).empty()) {
     QUICHE_DCHECK(quiche::GetQuicheCommandLineFlag(FLAGS_body).empty())
         << "Only set one of --body and --body_hex.";
-    const bool success = absl::HexStringToBytes(
-        quiche::GetQuicheCommandLineFlag(FLAGS_body_hex), &body);
-    QUICHE_DCHECK(success) << "Failed to parse --body_hex.";
+    body = absl::HexStringToBytes(
+        quiche::GetQuicheCommandLineFlag(FLAGS_body_hex));
   }
 
   // Construct a GET or POST request for supplied URL.
@@ -470,7 +466,10 @@ int QuicToyClient::SendRequestsAndPrintResponses(
       std::cout << "headers:" << header_block.DebugString();
       if (!quiche::GetQuicheCommandLineFlag(FLAGS_body_hex).empty()) {
         // Print the user provided hex, rather than binary body.
-        std::cout << "body:\n" << QuicheTextUtils::HexDump(body) << std::endl;
+        std::cout << "body:\n"
+                  << QuicheTextUtils::HexDump(absl::HexStringToBytes(
+                         quiche::GetQuicheCommandLineFlag(FLAGS_body_hex)))
+                  << std::endl;
       } else {
         std::cout << "body: " << body << std::endl;
       }
