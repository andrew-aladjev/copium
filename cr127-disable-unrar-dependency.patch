From fc302040cf79a90f248388d18828a34cad77245e Mon Sep 17 00:00:00 2001
From: "lauren n. liberda" <lauren@selfisekai.rocks>
Date: Fri, 21 Jun 2024 03:58:48 +0200
Subject: [PATCH] allow disabling dependency on unrar

---
 chrome/common/safe_browsing/BUILD.gn              |  5 ++++-
 .../services/file_util/safe_archive_analyzer.cc   |  2 ++
 chrome/services/file_util/safe_archive_analyzer.h |  9 +++++++--
 chrome/utility/safe_browsing/BUILD.gn             | 14 +++++++++++---
 chrome/utility/safe_browsing/archive_analyzer.cc  | 15 +++++++++++----
 components/safe_browsing/buildflags.gni           |  3 +++
 6 files changed, 38 insertions(+), 10 deletions(-)

diff --git a/chrome/common/safe_browsing/BUILD.gn b/chrome/common/safe_browsing/BUILD.gn
index a9ef59ca64365..94e0d81531e43 100644
--- a/chrome/common/safe_browsing/BUILD.gn
+++ b/chrome/common/safe_browsing/BUILD.gn
@@ -129,9 +129,12 @@ source_set("safe_browsing") {
       "//components/safe_browsing/content/common:file_type_policies",
       "//components/safe_browsing/core/common",
       "//third_party/lzma_sdk/google:seven_zip_reader",
-      "//third_party/unrar:unrar",
     ]
 
+    if (safe_browsing_use_unrar) {
+      deps += [ "//third_party/unrar" ]
+    }
+
     public_deps = [
       ":proto",
       "//base:i18n",
diff --git a/chrome/services/file_util/safe_archive_analyzer.cc b/chrome/services/file_util/safe_archive_analyzer.cc
index 123616de7c574..a021c551acea9 100644
--- a/chrome/services/file_util/safe_archive_analyzer.cc
+++ b/chrome/services/file_util/safe_archive_analyzer.cc
@@ -74,6 +74,7 @@ void SafeArchiveAnalyzer::AnalyzeRarFile(
     const std::optional<std::string>& password,
     mojo::PendingRemote<chrome::mojom::TemporaryFileGetter> temp_file_getter,
     AnalyzeRarFileCallback callback) {
+#if USE_UNRAR
   DCHECK(rar_file.IsValid());
   temp_file_getter_.Bind(std::move(temp_file_getter));
   callback_ = std::move(callback);
@@ -90,6 +91,7 @@ void SafeArchiveAnalyzer::AnalyzeRarFile(
                         /*password=*/password,
                         std::move(analysis_finished_callback),
                         std::move(temp_file_getter_callback), &results_);
+#endif
 }
 
 void SafeArchiveAnalyzer::AnalyzeSevenZipFile(
diff --git a/chrome/services/file_util/safe_archive_analyzer.h b/chrome/services/file_util/safe_archive_analyzer.h
index 77f9286793285..d3dcc77007ac0 100644
--- a/chrome/services/file_util/safe_archive_analyzer.h
+++ b/chrome/services/file_util/safe_archive_analyzer.h
@@ -9,7 +9,6 @@
 
 #include "chrome/common/safe_browsing/archive_analyzer_results.h"
 #include "chrome/services/file_util/public/mojom/safe_archive_analyzer.mojom.h"
-#include "chrome/utility/safe_browsing/rar_analyzer.h"
 #include "chrome/utility/safe_browsing/seven_zip_analyzer.h"
 #include "chrome/utility/safe_browsing/zip_analyzer.h"
 #include "mojo/public/cpp/bindings/remote.h"
@@ -18,6 +17,10 @@
 #include "chrome/utility/safe_browsing/mac/dmg_analyzer.h"
 #endif
 
+#if USE_UNRAR
+#include "chrome/utility/safe_browsing/rar_analyzer.h"
+#endif
+
 namespace base {
 class File;
 }
@@ -67,11 +70,13 @@ class SafeArchiveAnalyzer : public chrome::mojom::SafeArchiveAnalyzer {
   void Timeout();
 
   safe_browsing::ZipAnalyzer zip_analyzer_;
-  safe_browsing::RarAnalyzer rar_analyzer_;
   safe_browsing::SevenZipAnalyzer seven_zip_analyzer_;
 #if BUILDFLAG(IS_MAC)
   safe_browsing::dmg::DMGAnalyzer dmg_analyzer_;
 #endif
+#if USE_UNRAR
+  safe_browsing::RarAnalyzer rar_analyzer_;
+#endif
 
   // A timer to ensure no archive takes too long to unpack.
   base::OneShotTimer timeout_timer_;
diff --git a/chrome/utility/safe_browsing/BUILD.gn b/chrome/utility/safe_browsing/BUILD.gn
index 88d14a10f2801..5b99534508f88 100644
--- a/chrome/utility/safe_browsing/BUILD.gn
+++ b/chrome/utility/safe_browsing/BUILD.gn
@@ -11,8 +11,6 @@ source_set("safe_browsing") {
     sources = [
       "archive_analyzer.cc",
       "archive_analyzer.h",
-      "rar_analyzer.cc",
-      "rar_analyzer.h",
       "seven_zip_analyzer.cc",
       "seven_zip_analyzer.h",
       "zip_analyzer.cc",
@@ -35,10 +33,20 @@ source_set("safe_browsing") {
       "//components/safe_browsing/content/common:file_type_policies",
       "//components/safe_browsing/core/common",
       "//third_party/lzma_sdk/google:seven_zip_reader",
-      "//third_party/unrar:unrar",
       "//third_party/zlib",
     ]
 
+    if (safe_browsing_use_unrar) {
+      deps += [ "//third_party/unrar" ]
+      sources += [
+        "rar_analyzer.cc",
+        "rar_analyzer.h",
+      ]
+    }
+    defines = [
+      "USE_UNRAR=$safe_browsing_use_unrar",
+    ]
+
     if (is_mac) {
       deps += [
         "//base",
diff --git a/chrome/utility/safe_browsing/archive_analyzer.cc b/chrome/utility/safe_browsing/archive_analyzer.cc
index 67928b3c1f218..1fa4959d1da5e 100644
--- a/chrome/utility/safe_browsing/archive_analyzer.cc
+++ b/chrome/utility/safe_browsing/archive_analyzer.cc
@@ -8,7 +8,6 @@
 #include "build/build_config.h"
 #include "build/buildflag.h"
 #include "chrome/common/safe_browsing/archive_analyzer_results.h"
-#include "chrome/utility/safe_browsing/rar_analyzer.h"
 #include "chrome/utility/safe_browsing/seven_zip_analyzer.h"
 #include "chrome/utility/safe_browsing/zip_analyzer.h"
 #include "components/safe_browsing/content/common/proto/download_file_types.pb.h"
@@ -18,14 +17,16 @@
 #include "chrome/utility/safe_browsing/mac/dmg_analyzer.h"
 #endif
 
+#if USE_UNRAR
+#include "chrome/utility/safe_browsing/rar_analyzer.h"
+#endif
+
 namespace safe_browsing {
 
 // static
 std::unique_ptr<ArchiveAnalyzer> ArchiveAnalyzer::CreateForArchiveType(
     DownloadFileType_InspectionType file_type) {
-  if (file_type == DownloadFileType::RAR) {
-    return std::make_unique<RarAnalyzer>();
-  } else if (file_type == DownloadFileType::ZIP) {
+  if (file_type == DownloadFileType::ZIP) {
     return std::make_unique<ZipAnalyzer>();
   } else if (file_type == DownloadFileType::SEVEN_ZIP) {
     return std::make_unique<SevenZipAnalyzer>();
@@ -37,6 +38,12 @@ std::unique_ptr<ArchiveAnalyzer> ArchiveAnalyzer::CreateForArchiveType(
   }
 #endif
 
+#if USE_UNRAR
+  if (file_type == DownloadFileType::RAR) {
+    return std::make_unique<RarAnalyzer>();
+  }
+#endif
+
   return nullptr;
 }
 
diff --git a/components/safe_browsing/buildflags.gni b/components/safe_browsing/buildflags.gni
index 2315578c07110..48bfc8381b082 100644
--- a/components/safe_browsing/buildflags.gni
+++ b/components/safe_browsing/buildflags.gni
@@ -19,4 +19,7 @@ declare_args() {
   } else {
     safe_browsing_mode = 1
   }
+
+  # Allows building without //third_party/unrar included, for license reasons
+  safe_browsing_use_unrar = true
 }
