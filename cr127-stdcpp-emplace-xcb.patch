From e19db5fbf30d455c4a92bf3b74a9a194ee836a37 Mon Sep 17 00:00:00 2001
From: "lauren n. liberda" <lauren@selfisekai.rocks>
Date: Wed, 26 Jun 2024 23:07:14 +0200
Subject: [PATCH] xcb: workaround stdc++ bug with clang

std::optional<T>::emplace() without a value is broken
on clang++ with gnu libstdc++. this workarounds the bug
by explicitly providing an initialized value.
https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101227

Bug: 41455655
Change-Id: I00aa530f6e81fef842a664502bfb672c55a6d41d
---
 ui/gfx/x/gen_xproto.py              |   4 +-
 ui/gfx/x/generated_protos/randr.cc  |  14 +--
 ui/gfx/x/generated_protos/xinput.cc |  70 +++++++--------
 ui/gfx/x/generated_protos/xkb.cc    | 127 ++++++++++++++++------------
 4 files changed, 119 insertions(+), 96 deletions(-)

diff --git a/ui/gfx/x/gen_xproto.py b/ui/gfx/x/gen_xproto.py
index 8c174550d9b96..07ce777a78740 100644
--- a/ui/gfx/x/gen_xproto.py
+++ b/ui/gfx/x/gen_xproto.py
@@ -567,7 +567,9 @@ class GenXproto(FileWriter):
             for case_field in fields:
                 name = safe_name(case_field.field_name)
                 if case_field.visible and self.is_read:
-                    self.write('%s.%s.emplace();' % (switch_name, name))
+                    fn = '%s.%s' % (switch_name, name)
+                    self.write('%s.emplace(decltype(%s)::value_type());' %
+                               (fn, fn))
             with ScopedFields(self, obj, case.type.fields):
                 for case_field in case.type.fields:
                     self.copy_field(case_field)
diff --git a/ui/gfx/x/generated_protos/randr.cc b/ui/gfx/x/generated_protos/randr.cc
index 9cf87632ead90..443f49785eb19 100644
--- a/ui/gfx/x/generated_protos/randr.cc
+++ b/ui/gfx/x/generated_protos/randr.cc
@@ -305,7 +305,7 @@ void ReadEvent<RandR::NotifyEvent>(RandR::NotifyEvent* event_,
   // data
   auto data_expr = subCode;
   if (CaseEq(data_expr, RandR::Notify::CrtcChange)) {
-    data.cc.emplace();
+    data.cc.emplace(decltype(data.cc)::value_type());
     auto& timestamp = (*data.cc).timestamp;
     auto& window = (*data.cc).window;
     auto& crtc = (*data.cc).crtc;
@@ -349,7 +349,7 @@ void ReadEvent<RandR::NotifyEvent>(RandR::NotifyEvent* event_,
     Read(&height, &buf);
   }
   if (CaseEq(data_expr, RandR::Notify::OutputChange)) {
-    data.oc.emplace();
+    data.oc.emplace(decltype(data.oc)::value_type());
     auto& timestamp = (*data.oc).timestamp;
     auto& config_timestamp = (*data.oc).config_timestamp;
     auto& window = (*data.oc).window;
@@ -394,7 +394,7 @@ void ReadEvent<RandR::NotifyEvent>(RandR::NotifyEvent* event_,
     subpixel_order = static_cast<Render::SubPixel>(tmp6);
   }
   if (CaseEq(data_expr, RandR::Notify::OutputProperty)) {
-    data.op.emplace();
+    data.op.emplace(decltype(data.op)::value_type());
     auto& window = (*data.op).window;
     auto& output = (*data.op).output;
     auto& atom = (*data.op).atom;
@@ -422,7 +422,7 @@ void ReadEvent<RandR::NotifyEvent>(RandR::NotifyEvent* event_,
     Pad(&buf, 11);
   }
   if (CaseEq(data_expr, RandR::Notify::ProviderChange)) {
-    data.pc.emplace();
+    data.pc.emplace(decltype(data.pc)::value_type());
     auto& timestamp = (*data.pc).timestamp;
     auto& window = (*data.pc).window;
     auto& provider = (*data.pc).provider;
@@ -440,7 +440,7 @@ void ReadEvent<RandR::NotifyEvent>(RandR::NotifyEvent* event_,
     Pad(&buf, 16);
   }
   if (CaseEq(data_expr, RandR::Notify::ProviderProperty)) {
-    data.pp.emplace();
+    data.pp.emplace(decltype(data.pp)::value_type());
     auto& window = (*data.pp).window;
     auto& provider = (*data.pp).provider;
     auto& atom = (*data.pp).atom;
@@ -466,7 +466,7 @@ void ReadEvent<RandR::NotifyEvent>(RandR::NotifyEvent* event_,
     Pad(&buf, 11);
   }
   if (CaseEq(data_expr, RandR::Notify::ResourceChange)) {
-    data.rc.emplace();
+    data.rc.emplace(decltype(data.rc)::value_type());
     auto& timestamp = (*data.rc).timestamp;
     auto& window = (*data.rc).window;
 
@@ -480,7 +480,7 @@ void ReadEvent<RandR::NotifyEvent>(RandR::NotifyEvent* event_,
     Pad(&buf, 20);
   }
   if (CaseEq(data_expr, RandR::Notify::Lease)) {
-    data.lc.emplace();
+    data.lc.emplace(decltype(data.lc)::value_type());
     auto& timestamp = (*data.lc).timestamp;
     auto& window = (*data.lc).window;
     auto& lease = (*data.lc).lease;
diff --git a/ui/gfx/x/generated_protos/xinput.cc b/ui/gfx/x/generated_protos/xinput.cc
index 3f63d1efe633a..9451d1a6832fa 100644
--- a/ui/gfx/x/generated_protos/xinput.cc
+++ b/ui/gfx/x/generated_protos/xinput.cc
@@ -560,7 +560,7 @@ void ReadEvent<Input::DeviceChangedEvent>(Input::DeviceChangedEvent* event_,
       // data
       auto data_expr = type;
       if (CaseEq(data_expr, Input::DeviceClassType::Key)) {
-        data.key.emplace();
+        data.key.emplace(decltype(data.key)::value_type());
         uint16_t num_keys{};
         auto& keys = (*data.key).keys;
 
@@ -575,7 +575,7 @@ void ReadEvent<Input::DeviceChangedEvent>(Input::DeviceChangedEvent* event_,
         }
       }
       if (CaseEq(data_expr, Input::DeviceClassType::Button)) {
-        data.button.emplace();
+        data.button.emplace(decltype(data.button)::value_type());
         uint16_t num_buttons{};
         auto& state = (*data.button).state;
         auto& labels = (*data.button).labels;
@@ -598,7 +598,7 @@ void ReadEvent<Input::DeviceChangedEvent>(Input::DeviceChangedEvent* event_,
         }
       }
       if (CaseEq(data_expr, Input::DeviceClassType::Valuator)) {
-        data.valuator.emplace();
+        data.valuator.emplace(decltype(data.valuator)::value_type());
         auto& number = (*data.valuator).number;
         auto& label = (*data.valuator).label;
         auto& min = (*data.valuator).min;
@@ -661,7 +661,7 @@ void ReadEvent<Input::DeviceChangedEvent>(Input::DeviceChangedEvent* event_,
         Pad(&buf, 3);
       }
       if (CaseEq(data_expr, Input::DeviceClassType::Scroll)) {
-        data.scroll.emplace();
+        data.scroll.emplace(decltype(data.scroll)::value_type());
         auto& number = (*data.scroll).number;
         auto& scroll_type = (*data.scroll).scroll_type;
         auto& flags = (*data.scroll).flags;
@@ -696,7 +696,7 @@ void ReadEvent<Input::DeviceChangedEvent>(Input::DeviceChangedEvent* event_,
         }
       }
       if (CaseEq(data_expr, Input::DeviceClassType::Touch)) {
-        data.touch.emplace();
+        data.touch.emplace(decltype(data.touch)::value_type());
         auto& mode = (*data.touch).mode;
         auto& num_touches = (*data.touch).num_touches;
 
@@ -709,7 +709,7 @@ void ReadEvent<Input::DeviceChangedEvent>(Input::DeviceChangedEvent* event_,
         Read(&num_touches, &buf);
       }
       if (CaseEq(data_expr, Input::DeviceClassType::Gesture)) {
-        data.gesture.emplace();
+        data.gesture.emplace(decltype(data.gesture)::value_type());
         auto& num_touches = (*data.gesture).num_touches;
 
         // num_touches
@@ -2187,7 +2187,7 @@ std::unique_ptr<Input::ListInputDevicesReply> detail::ReadReply<
       // info
       auto info_expr = class_id;
       if (CaseEq(info_expr, Input::InputClass::Key)) {
-        info.key.emplace();
+        info.key.emplace(decltype(info.key)::value_type());
         auto& min_keycode = (*info.key).min_keycode;
         auto& max_keycode = (*info.key).max_keycode;
         auto& num_keys = (*info.key).num_keys;
@@ -2205,14 +2205,14 @@ std::unique_ptr<Input::ListInputDevicesReply> detail::ReadReply<
         Pad(&buf, 2);
       }
       if (CaseEq(info_expr, Input::InputClass::Button)) {
-        info.button.emplace();
+        info.button.emplace(decltype(info.button)::value_type());
         auto& num_buttons = (*info.button).num_buttons;
 
         // num_buttons
         Read(&num_buttons, &buf);
       }
       if (CaseEq(info_expr, Input::InputClass::Valuator)) {
-        info.valuator.emplace();
+        info.valuator.emplace(decltype(info.valuator)::value_type());
         uint8_t axes_len{};
         auto& mode = (*info.valuator).mode;
         auto& motion_size = (*info.valuator).motion_size;
@@ -3818,7 +3818,7 @@ std::unique_ptr<Input::GetFeedbackControlReply> detail::ReadReply<
       // data
       auto data_expr = class_id;
       if (CaseEq(data_expr, Input::FeedbackClass::Keyboard)) {
-        data.keyboard.emplace();
+        data.keyboard.emplace(decltype(data.keyboard)::value_type());
         auto& pitch = (*data.keyboard).pitch;
         auto& duration = (*data.keyboard).duration;
         auto& led_mask = (*data.keyboard).led_mask;
@@ -3859,7 +3859,7 @@ std::unique_ptr<Input::GetFeedbackControlReply> detail::ReadReply<
         }
       }
       if (CaseEq(data_expr, Input::FeedbackClass::Pointer)) {
-        data.pointer.emplace();
+        data.pointer.emplace(decltype(data.pointer)::value_type());
         auto& accel_num = (*data.pointer).accel_num;
         auto& accel_denom = (*data.pointer).accel_denom;
         auto& threshold = (*data.pointer).threshold;
@@ -3877,7 +3877,7 @@ std::unique_ptr<Input::GetFeedbackControlReply> detail::ReadReply<
         Read(&threshold, &buf);
       }
       if (CaseEq(data_expr, Input::FeedbackClass::String)) {
-        data.string.emplace();
+        data.string.emplace(decltype(data.string)::value_type());
         auto& max_symbols = (*data.string).max_symbols;
         uint16_t num_keysyms{};
         auto& keysyms = (*data.string).keysyms;
@@ -3896,7 +3896,7 @@ std::unique_ptr<Input::GetFeedbackControlReply> detail::ReadReply<
         }
       }
       if (CaseEq(data_expr, Input::FeedbackClass::Integer)) {
-        data.integer.emplace();
+        data.integer.emplace(decltype(data.integer)::value_type());
         auto& resolution = (*data.integer).resolution;
         auto& min_value = (*data.integer).min_value;
         auto& max_value = (*data.integer).max_value;
@@ -3911,7 +3911,7 @@ std::unique_ptr<Input::GetFeedbackControlReply> detail::ReadReply<
         Read(&max_value, &buf);
       }
       if (CaseEq(data_expr, Input::FeedbackClass::Led)) {
-        data.led.emplace();
+        data.led.emplace(decltype(data.led)::value_type());
         auto& led_mask = (*data.led).led_mask;
         auto& led_values = (*data.led).led_values;
 
@@ -3922,7 +3922,7 @@ std::unique_ptr<Input::GetFeedbackControlReply> detail::ReadReply<
         Read(&led_values, &buf);
       }
       if (CaseEq(data_expr, Input::FeedbackClass::Bell)) {
-        data.bell.emplace();
+        data.bell.emplace(decltype(data.bell)::value_type());
         auto& percent = (*data.bell).percent;
         auto& pitch = (*data.bell).pitch;
         auto& duration = (*data.bell).duration;
@@ -4735,7 +4735,7 @@ std::unique_ptr<Input::QueryDeviceStateReply> detail::ReadReply<
       // data
       auto data_expr = class_id;
       if (CaseEq(data_expr, Input::InputClass::Key)) {
-        data.key.emplace();
+        data.key.emplace(decltype(data.key)::value_type());
         auto& num_keys = (*data.key).num_keys;
         auto& keys = (*data.key).keys;
 
@@ -4752,7 +4752,7 @@ std::unique_ptr<Input::QueryDeviceStateReply> detail::ReadReply<
         }
       }
       if (CaseEq(data_expr, Input::InputClass::Button)) {
-        data.button.emplace();
+        data.button.emplace(decltype(data.button)::value_type());
         auto& num_buttons = (*data.button).num_buttons;
         auto& buttons = (*data.button).buttons;
 
@@ -4769,7 +4769,7 @@ std::unique_ptr<Input::QueryDeviceStateReply> detail::ReadReply<
         }
       }
       if (CaseEq(data_expr, Input::InputClass::Valuator)) {
-        data.valuator.emplace();
+        data.valuator.emplace(decltype(data.valuator)::value_type());
         uint8_t num_valuators{};
         auto& mode = (*data.valuator).mode;
         auto& valuators = (*data.valuator).valuators;
@@ -5039,7 +5039,7 @@ std::unique_ptr<Input::GetDeviceControlReply> detail::ReadReply<
     // data
     auto data_expr = control_id;
     if (CaseEq(data_expr, Input::DeviceControl::resolution)) {
-      data.resolution.emplace();
+      data.resolution.emplace(decltype(data.resolution)::value_type());
       uint32_t num_valuators{};
       auto& resolution_values = (*data.resolution).resolution_values;
       auto& resolution_min = (*data.resolution).resolution_min;
@@ -5070,7 +5070,7 @@ std::unique_ptr<Input::GetDeviceControlReply> detail::ReadReply<
       }
     }
     if (CaseEq(data_expr, Input::DeviceControl::abs_calib)) {
-      data.abs_calib.emplace();
+      data.abs_calib.emplace(decltype(data.abs_calib)::value_type());
       auto& min_x = (*data.abs_calib).min_x;
       auto& max_x = (*data.abs_calib).max_x;
       auto& min_y = (*data.abs_calib).min_y;
@@ -5105,7 +5105,7 @@ std::unique_ptr<Input::GetDeviceControlReply> detail::ReadReply<
       Read(&button_threshold, &buf);
     }
     if (CaseEq(data_expr, Input::DeviceControl::core)) {
-      data.core.emplace();
+      data.core.emplace(decltype(data.core)::value_type());
       auto& status = (*data.core).status;
       auto& iscore = (*data.core).iscore;
 
@@ -5119,7 +5119,7 @@ std::unique_ptr<Input::GetDeviceControlReply> detail::ReadReply<
       Pad(&buf, 2);
     }
     if (CaseEq(data_expr, Input::DeviceControl::enable)) {
-      data.enable.emplace();
+      data.enable.emplace(decltype(data.enable)::value_type());
       auto& enable = (*data.enable).enable;
 
       // enable
@@ -5129,7 +5129,7 @@ std::unique_ptr<Input::GetDeviceControlReply> detail::ReadReply<
       Pad(&buf, 3);
     }
     if (CaseEq(data_expr, Input::DeviceControl::abs_area)) {
-      data.abs_area.emplace();
+      data.abs_area.emplace(decltype(data.abs_area)::value_type());
       auto& offset_x = (*data.abs_area).offset_x;
       auto& offset_y = (*data.abs_area).offset_y;
       auto& width = (*data.abs_area).width;
@@ -5732,7 +5732,7 @@ std::unique_ptr<Input::GetDevicePropertyReply> detail::ReadReply<
   // items
   auto items_expr = format;
   if (CaseEq(items_expr, Input::PropertyFormat::c_8Bits)) {
-    items.data8.emplace();
+    items.data8.emplace(decltype(items.data8)::value_type());
     auto& data8 = *items.data8;
 
     // data8
@@ -5746,7 +5746,7 @@ std::unique_ptr<Input::GetDevicePropertyReply> detail::ReadReply<
     Align(&buf, 4);
   }
   if (CaseEq(items_expr, Input::PropertyFormat::c_16Bits)) {
-    items.data16.emplace();
+    items.data16.emplace(decltype(items.data16)::value_type());
     auto& data16 = *items.data16;
 
     // data16
@@ -5760,7 +5760,7 @@ std::unique_ptr<Input::GetDevicePropertyReply> detail::ReadReply<
     Align(&buf, 4);
   }
   if (CaseEq(items_expr, Input::PropertyFormat::c_32Bits)) {
-    items.data32.emplace();
+    items.data32.emplace(decltype(items.data32)::value_type());
     auto& data32 = *items.data32;
 
     // data32
@@ -6610,7 +6610,7 @@ std::unique_ptr<Input::XIQueryDeviceReply> detail::ReadReply<
           // data
           auto data_expr = type;
           if (CaseEq(data_expr, Input::DeviceClassType::Key)) {
-            data.key.emplace();
+            data.key.emplace(decltype(data.key)::value_type());
             uint16_t num_keys{};
             auto& keys = (*data.key).keys;
 
@@ -6625,7 +6625,7 @@ std::unique_ptr<Input::XIQueryDeviceReply> detail::ReadReply<
             }
           }
           if (CaseEq(data_expr, Input::DeviceClassType::Button)) {
-            data.button.emplace();
+            data.button.emplace(decltype(data.button)::value_type());
             uint16_t num_buttons{};
             auto& state = (*data.button).state;
             auto& labels = (*data.button).labels;
@@ -6648,7 +6648,7 @@ std::unique_ptr<Input::XIQueryDeviceReply> detail::ReadReply<
             }
           }
           if (CaseEq(data_expr, Input::DeviceClassType::Valuator)) {
-            data.valuator.emplace();
+            data.valuator.emplace(decltype(data.valuator)::value_type());
             auto& number = (*data.valuator).number;
             auto& label = (*data.valuator).label;
             auto& min = (*data.valuator).min;
@@ -6711,7 +6711,7 @@ std::unique_ptr<Input::XIQueryDeviceReply> detail::ReadReply<
             Pad(&buf, 3);
           }
           if (CaseEq(data_expr, Input::DeviceClassType::Scroll)) {
-            data.scroll.emplace();
+            data.scroll.emplace(decltype(data.scroll)::value_type());
             auto& number = (*data.scroll).number;
             auto& scroll_type = (*data.scroll).scroll_type;
             auto& flags = (*data.scroll).flags;
@@ -6746,7 +6746,7 @@ std::unique_ptr<Input::XIQueryDeviceReply> detail::ReadReply<
             }
           }
           if (CaseEq(data_expr, Input::DeviceClassType::Touch)) {
-            data.touch.emplace();
+            data.touch.emplace(decltype(data.touch)::value_type());
             auto& mode = (*data.touch).mode;
             auto& num_touches = (*data.touch).num_touches;
 
@@ -6759,7 +6759,7 @@ std::unique_ptr<Input::XIQueryDeviceReply> detail::ReadReply<
             Read(&num_touches, &buf);
           }
           if (CaseEq(data_expr, Input::DeviceClassType::Gesture)) {
-            data.gesture.emplace();
+            data.gesture.emplace(decltype(data.gesture)::value_type());
             auto& num_touches = (*data.gesture).num_touches;
 
             // num_touches
@@ -7713,7 +7713,7 @@ std::unique_ptr<Input::XIGetPropertyReply> detail::ReadReply<
   // items
   auto items_expr = format;
   if (CaseEq(items_expr, Input::PropertyFormat::c_8Bits)) {
-    items.data8.emplace();
+    items.data8.emplace(decltype(items.data8)::value_type());
     auto& data8 = *items.data8;
 
     // data8
@@ -7727,7 +7727,7 @@ std::unique_ptr<Input::XIGetPropertyReply> detail::ReadReply<
     Align(&buf, 4);
   }
   if (CaseEq(items_expr, Input::PropertyFormat::c_16Bits)) {
-    items.data16.emplace();
+    items.data16.emplace(decltype(items.data16)::value_type());
     auto& data16 = *items.data16;
 
     // data16
@@ -7741,7 +7741,7 @@ std::unique_ptr<Input::XIGetPropertyReply> detail::ReadReply<
     Align(&buf, 4);
   }
   if (CaseEq(items_expr, Input::PropertyFormat::c_32Bits)) {
-    items.data32.emplace();
+    items.data32.emplace(decltype(items.data32)::value_type());
     auto& data32 = *items.data32;
 
     // data32
diff --git a/ui/gfx/x/generated_protos/xkb.cc b/ui/gfx/x/generated_protos/xkb.cc
index 0fd5c939f8d73..68c7bd69b8231 100644
--- a/ui/gfx/x/generated_protos/xkb.cc
+++ b/ui/gfx/x/generated_protos/xkb.cc
@@ -2344,7 +2344,7 @@ std::unique_ptr<Xkb::GetMapReply> detail::ReadReply<Xkb::GetMapReply>(
   // map
   auto map_expr = present;
   if (CaseAnd(map_expr, Xkb::MapPart::KeyTypes)) {
-    map.types_rtrn.emplace();
+    map.types_rtrn.emplace(decltype(map.types_rtrn)::value_type());
     auto& types_rtrn = *map.types_rtrn;
 
     // types_rtrn
@@ -2454,7 +2454,7 @@ std::unique_ptr<Xkb::GetMapReply> detail::ReadReply<Xkb::GetMapReply>(
     }
   }
   if (CaseAnd(map_expr, Xkb::MapPart::KeySyms)) {
-    map.syms_rtrn.emplace();
+    map.syms_rtrn.emplace(decltype(map.syms_rtrn)::value_type());
     auto& syms_rtrn = *map.syms_rtrn;
 
     // syms_rtrn
@@ -2493,8 +2493,8 @@ std::unique_ptr<Xkb::GetMapReply> detail::ReadReply<Xkb::GetMapReply>(
     }
   }
   if (CaseAnd(map_expr, Xkb::MapPart::KeyActions)) {
-    map.acts_rtrn_count.emplace();
-    map.acts_rtrn_acts.emplace();
+    map.acts_rtrn_count.emplace(decltype(map.acts_rtrn_count)::value_type());
+    map.acts_rtrn_acts.emplace(decltype(map.acts_rtrn_acts)::value_type());
     auto& acts_rtrn_count = *map.acts_rtrn_count;
     auto& acts_rtrn_acts = *map.acts_rtrn_acts;
 
@@ -2516,7 +2516,7 @@ std::unique_ptr<Xkb::GetMapReply> detail::ReadReply<Xkb::GetMapReply>(
     }
   }
   if (CaseAnd(map_expr, Xkb::MapPart::KeyBehaviors)) {
-    map.behaviors_rtrn.emplace();
+    map.behaviors_rtrn.emplace(decltype(map.behaviors_rtrn)::value_type());
     auto& behaviors_rtrn = *map.behaviors_rtrn;
 
     // behaviors_rtrn
@@ -2539,7 +2539,7 @@ std::unique_ptr<Xkb::GetMapReply> detail::ReadReply<Xkb::GetMapReply>(
     }
   }
   if (CaseAnd(map_expr, Xkb::MapPart::VirtualMods)) {
-    map.vmods_rtrn.emplace();
+    map.vmods_rtrn.emplace(decltype(map.vmods_rtrn)::value_type());
     auto& vmods_rtrn = *map.vmods_rtrn;
 
     // vmods_rtrn
@@ -2555,7 +2555,7 @@ std::unique_ptr<Xkb::GetMapReply> detail::ReadReply<Xkb::GetMapReply>(
     Align(&buf, 4);
   }
   if (CaseAnd(map_expr, Xkb::MapPart::ExplicitComponents)) {
-    map.explicit_rtrn.emplace();
+    map.explicit_rtrn.emplace(decltype(map.explicit_rtrn)::value_type());
     auto& explicit_rtrn = *map.explicit_rtrn;
 
     // explicit_rtrn
@@ -2580,7 +2580,7 @@ std::unique_ptr<Xkb::GetMapReply> detail::ReadReply<Xkb::GetMapReply>(
     Align(&buf, 4);
   }
   if (CaseAnd(map_expr, Xkb::MapPart::ModifierMap)) {
-    map.modmap_rtrn.emplace();
+    map.modmap_rtrn.emplace(decltype(map.modmap_rtrn)::value_type());
     auto& modmap_rtrn = *map.modmap_rtrn;
 
     // modmap_rtrn
@@ -2605,7 +2605,7 @@ std::unique_ptr<Xkb::GetMapReply> detail::ReadReply<Xkb::GetMapReply>(
     Align(&buf, 4);
   }
   if (CaseAnd(map_expr, Xkb::MapPart::VirtualModMap)) {
-    map.vmodmap_rtrn.emplace();
+    map.vmodmap_rtrn.emplace(decltype(map.vmodmap_rtrn)::value_type());
     auto& vmodmap_rtrn = *map.vmodmap_rtrn;
 
     // vmodmap_rtrn
@@ -4188,49 +4188,53 @@ std::unique_ptr<Xkb::GetNamesReply> detail::ReadReply<Xkb::GetNamesReply>(
   // valueList
   auto valueList_expr = which;
   if (CaseAnd(valueList_expr, Xkb::NameDetail::Keycodes)) {
-    valueList.keycodesName.emplace();
+    valueList.keycodesName.emplace(
+        decltype(valueList.keycodesName)::value_type());
     auto& keycodesName = *valueList.keycodesName;
 
     // keycodesName
     Read(&keycodesName, &buf);
   }
   if (CaseAnd(valueList_expr, Xkb::NameDetail::Geometry)) {
-    valueList.geometryName.emplace();
+    valueList.geometryName.emplace(
+        decltype(valueList.geometryName)::value_type());
     auto& geometryName = *valueList.geometryName;
 
     // geometryName
     Read(&geometryName, &buf);
   }
   if (CaseAnd(valueList_expr, Xkb::NameDetail::Symbols)) {
-    valueList.symbolsName.emplace();
+    valueList.symbolsName.emplace(
+        decltype(valueList.symbolsName)::value_type());
     auto& symbolsName = *valueList.symbolsName;
 
     // symbolsName
     Read(&symbolsName, &buf);
   }
   if (CaseAnd(valueList_expr, Xkb::NameDetail::PhysSymbols)) {
-    valueList.physSymbolsName.emplace();
+    valueList.physSymbolsName.emplace(
+        decltype(valueList.physSymbolsName)::value_type());
     auto& physSymbolsName = *valueList.physSymbolsName;
 
     // physSymbolsName
     Read(&physSymbolsName, &buf);
   }
   if (CaseAnd(valueList_expr, Xkb::NameDetail::Types)) {
-    valueList.typesName.emplace();
+    valueList.typesName.emplace(decltype(valueList.typesName)::value_type());
     auto& typesName = *valueList.typesName;
 
     // typesName
     Read(&typesName, &buf);
   }
   if (CaseAnd(valueList_expr, Xkb::NameDetail::Compat)) {
-    valueList.compatName.emplace();
+    valueList.compatName.emplace(decltype(valueList.compatName)::value_type());
     auto& compatName = *valueList.compatName;
 
     // compatName
     Read(&compatName, &buf);
   }
   if (CaseAnd(valueList_expr, Xkb::NameDetail::KeyTypeNames)) {
-    valueList.typeNames.emplace();
+    valueList.typeNames.emplace(decltype(valueList.typeNames)::value_type());
     auto& typeNames = *valueList.typeNames;
 
     // typeNames
@@ -4241,8 +4245,10 @@ std::unique_ptr<Xkb::GetNamesReply> detail::ReadReply<Xkb::GetNamesReply>(
     }
   }
   if (CaseAnd(valueList_expr, Xkb::NameDetail::KTLevelNames)) {
-    valueList.nLevelsPerType.emplace();
-    valueList.ktLevelNames.emplace();
+    valueList.nLevelsPerType.emplace(
+        decltype(valueList.nLevelsPerType)::value_type());
+    valueList.ktLevelNames.emplace(
+        decltype(valueList.ktLevelNames)::value_type());
     auto& nLevelsPerType = *valueList.nLevelsPerType;
     auto& ktLevelNames = *valueList.ktLevelNames;
 
@@ -4266,7 +4272,8 @@ std::unique_ptr<Xkb::GetNamesReply> detail::ReadReply<Xkb::GetNamesReply>(
     }
   }
   if (CaseAnd(valueList_expr, Xkb::NameDetail::IndicatorNames)) {
-    valueList.indicatorNames.emplace();
+    valueList.indicatorNames.emplace(
+        decltype(valueList.indicatorNames)::value_type());
     auto& indicatorNames = *valueList.indicatorNames;
 
     // indicatorNames
@@ -4277,7 +4284,8 @@ std::unique_ptr<Xkb::GetNamesReply> detail::ReadReply<Xkb::GetNamesReply>(
     }
   }
   if (CaseAnd(valueList_expr, Xkb::NameDetail::VirtualModNames)) {
-    valueList.virtualModNames.emplace();
+    valueList.virtualModNames.emplace(
+        decltype(valueList.virtualModNames)::value_type());
     auto& virtualModNames = *valueList.virtualModNames;
 
     // virtualModNames
@@ -4288,7 +4296,7 @@ std::unique_ptr<Xkb::GetNamesReply> detail::ReadReply<Xkb::GetNamesReply>(
     }
   }
   if (CaseAnd(valueList_expr, Xkb::NameDetail::GroupNames)) {
-    valueList.groups.emplace();
+    valueList.groups.emplace(decltype(valueList.groups)::value_type());
     auto& groups = *valueList.groups;
 
     // groups
@@ -4299,7 +4307,7 @@ std::unique_ptr<Xkb::GetNamesReply> detail::ReadReply<Xkb::GetNamesReply>(
     }
   }
   if (CaseAnd(valueList_expr, Xkb::NameDetail::KeyNames)) {
-    valueList.keyNames.emplace();
+    valueList.keyNames.emplace(decltype(valueList.keyNames)::value_type());
     auto& keyNames = *valueList.keyNames;
 
     // keyNames
@@ -4318,7 +4326,7 @@ std::unique_ptr<Xkb::GetNamesReply> detail::ReadReply<Xkb::GetNamesReply>(
     }
   }
   if (CaseAnd(valueList_expr, Xkb::NameDetail::KeyAliases)) {
-    valueList.keyAliases.emplace();
+    valueList.keyAliases.emplace(decltype(valueList.keyAliases)::value_type());
     auto& keyAliases = *valueList.keyAliases;
 
     // keyAliases
@@ -4344,7 +4352,8 @@ std::unique_ptr<Xkb::GetNamesReply> detail::ReadReply<Xkb::GetNamesReply>(
     }
   }
   if (CaseAnd(valueList_expr, Xkb::NameDetail::RGNames)) {
-    valueList.radioGroupNames.emplace();
+    valueList.radioGroupNames.emplace(
+        decltype(valueList.radioGroupNames)::value_type());
     auto& radioGroupNames = *valueList.radioGroupNames;
 
     // radioGroupNames
@@ -5207,7 +5216,7 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
   if (CaseAnd(replies_expr, Xkb::GBNDetail::Types) ||
       CaseAnd(replies_expr, Xkb::GBNDetail::ClientSymbols) ||
       CaseAnd(replies_expr, Xkb::GBNDetail::ServerSymbols)) {
-    replies.types.emplace();
+    replies.types.emplace(decltype(replies.types)::value_type());
     auto& getmap_type = (*replies.types).getmap_type;
     auto& typeDeviceID = (*replies.types).typeDeviceID;
     auto& getmap_sequence = (*replies.types).getmap_sequence;
@@ -5339,7 +5348,7 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
     // map
     auto map_expr = present;
     if (CaseAnd(map_expr, Xkb::MapPart::KeyTypes)) {
-      map.types_rtrn.emplace();
+      map.types_rtrn.emplace(decltype(map.types_rtrn)::value_type());
       auto& types_rtrn = *map.types_rtrn;
 
       // types_rtrn
@@ -5449,7 +5458,7 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
       }
     }
     if (CaseAnd(map_expr, Xkb::MapPart::KeySyms)) {
-      map.syms_rtrn.emplace();
+      map.syms_rtrn.emplace(decltype(map.syms_rtrn)::value_type());
       auto& syms_rtrn = *map.syms_rtrn;
 
       // syms_rtrn
@@ -5488,8 +5497,8 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
       }
     }
     if (CaseAnd(map_expr, Xkb::MapPart::KeyActions)) {
-      map.acts_rtrn_count.emplace();
-      map.acts_rtrn_acts.emplace();
+      map.acts_rtrn_count.emplace(decltype(map.acts_rtrn_count)::value_type());
+      map.acts_rtrn_acts.emplace(decltype(map.acts_rtrn_acts)::value_type());
       auto& acts_rtrn_count = *map.acts_rtrn_count;
       auto& acts_rtrn_acts = *map.acts_rtrn_acts;
 
@@ -5511,7 +5520,7 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
       }
     }
     if (CaseAnd(map_expr, Xkb::MapPart::KeyBehaviors)) {
-      map.behaviors_rtrn.emplace();
+      map.behaviors_rtrn.emplace(decltype(map.behaviors_rtrn)::value_type());
       auto& behaviors_rtrn = *map.behaviors_rtrn;
 
       // behaviors_rtrn
@@ -5534,7 +5543,7 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
       }
     }
     if (CaseAnd(map_expr, Xkb::MapPart::VirtualMods)) {
-      map.vmods_rtrn.emplace();
+      map.vmods_rtrn.emplace(decltype(map.vmods_rtrn)::value_type());
       auto& vmods_rtrn = *map.vmods_rtrn;
 
       // vmods_rtrn
@@ -5550,7 +5559,7 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
       Align(&buf, 4);
     }
     if (CaseAnd(map_expr, Xkb::MapPart::ExplicitComponents)) {
-      map.explicit_rtrn.emplace();
+      map.explicit_rtrn.emplace(decltype(map.explicit_rtrn)::value_type());
       auto& explicit_rtrn = *map.explicit_rtrn;
 
       // explicit_rtrn
@@ -5575,7 +5584,7 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
       Align(&buf, 4);
     }
     if (CaseAnd(map_expr, Xkb::MapPart::ModifierMap)) {
-      map.modmap_rtrn.emplace();
+      map.modmap_rtrn.emplace(decltype(map.modmap_rtrn)::value_type());
       auto& modmap_rtrn = *map.modmap_rtrn;
 
       // modmap_rtrn
@@ -5600,7 +5609,7 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
       Align(&buf, 4);
     }
     if (CaseAnd(map_expr, Xkb::MapPart::VirtualModMap)) {
-      map.vmodmap_rtrn.emplace();
+      map.vmodmap_rtrn.emplace(decltype(map.vmodmap_rtrn)::value_type());
       auto& vmodmap_rtrn = *map.vmodmap_rtrn;
 
       // vmodmap_rtrn
@@ -5626,7 +5635,7 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
     }
   }
   if (CaseAnd(replies_expr, Xkb::GBNDetail::CompatMap)) {
-    replies.compat_map.emplace();
+    replies.compat_map.emplace(decltype(replies.compat_map)::value_type());
     auto& compatmap_type = (*replies.compat_map).compatmap_type;
     auto& compatDeviceID = (*replies.compat_map).compatDeviceID;
     auto& compatmap_sequence = (*replies.compat_map).compatmap_sequence;
@@ -5747,7 +5756,8 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
     }
   }
   if (CaseAnd(replies_expr, Xkb::GBNDetail::IndicatorMaps)) {
-    replies.indicator_maps.emplace();
+    replies.indicator_maps.emplace(
+        decltype(replies.indicator_maps)::value_type());
     auto& indicatormap_type = (*replies.indicator_maps).indicatormap_type;
     auto& indicatorDeviceID = (*replies.indicator_maps).indicatorDeviceID;
     auto& indicatormap_sequence =
@@ -5840,7 +5850,7 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
   }
   if (CaseAnd(replies_expr, Xkb::GBNDetail::KeyNames) ||
       CaseAnd(replies_expr, Xkb::GBNDetail::OtherNames)) {
-    replies.key_names.emplace();
+    replies.key_names.emplace(decltype(replies.key_names)::value_type());
     auto& keyname_type = (*replies.key_names).keyname_type;
     auto& keyDeviceID = (*replies.key_names).keyDeviceID;
     auto& keyname_sequence = (*replies.key_names).keyname_sequence;
@@ -5919,49 +5929,54 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
     // valueList
     auto valueList_expr = which;
     if (CaseAnd(valueList_expr, Xkb::NameDetail::Keycodes)) {
-      valueList.keycodesName.emplace();
+      valueList.keycodesName.emplace(
+          decltype(valueList.keycodesName)::value_type());
       auto& keycodesName = *valueList.keycodesName;
 
       // keycodesName
       Read(&keycodesName, &buf);
     }
     if (CaseAnd(valueList_expr, Xkb::NameDetail::Geometry)) {
-      valueList.geometryName.emplace();
+      valueList.geometryName.emplace(
+          decltype(valueList.geometryName)::value_type());
       auto& geometryName = *valueList.geometryName;
 
       // geometryName
       Read(&geometryName, &buf);
     }
     if (CaseAnd(valueList_expr, Xkb::NameDetail::Symbols)) {
-      valueList.symbolsName.emplace();
+      valueList.symbolsName.emplace(
+          decltype(valueList.symbolsName)::value_type());
       auto& symbolsName = *valueList.symbolsName;
 
       // symbolsName
       Read(&symbolsName, &buf);
     }
     if (CaseAnd(valueList_expr, Xkb::NameDetail::PhysSymbols)) {
-      valueList.physSymbolsName.emplace();
+      valueList.physSymbolsName.emplace(
+          decltype(valueList.physSymbolsName)::value_type());
       auto& physSymbolsName = *valueList.physSymbolsName;
 
       // physSymbolsName
       Read(&physSymbolsName, &buf);
     }
     if (CaseAnd(valueList_expr, Xkb::NameDetail::Types)) {
-      valueList.typesName.emplace();
+      valueList.typesName.emplace(decltype(valueList.typesName)::value_type());
       auto& typesName = *valueList.typesName;
 
       // typesName
       Read(&typesName, &buf);
     }
     if (CaseAnd(valueList_expr, Xkb::NameDetail::Compat)) {
-      valueList.compatName.emplace();
+      valueList.compatName.emplace(
+          decltype(valueList.compatName)::value_type());
       auto& compatName = *valueList.compatName;
 
       // compatName
       Read(&compatName, &buf);
     }
     if (CaseAnd(valueList_expr, Xkb::NameDetail::KeyTypeNames)) {
-      valueList.typeNames.emplace();
+      valueList.typeNames.emplace(decltype(valueList.typeNames)::value_type());
       auto& typeNames = *valueList.typeNames;
 
       // typeNames
@@ -5972,8 +5987,10 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
       }
     }
     if (CaseAnd(valueList_expr, Xkb::NameDetail::KTLevelNames)) {
-      valueList.nLevelsPerType.emplace();
-      valueList.ktLevelNames.emplace();
+      valueList.nLevelsPerType.emplace(
+          decltype(valueList.nLevelsPerType)::value_type());
+      valueList.ktLevelNames.emplace(
+          decltype(valueList.ktLevelNames)::value_type());
       auto& nLevelsPerType = *valueList.nLevelsPerType;
       auto& ktLevelNames = *valueList.ktLevelNames;
 
@@ -5997,7 +6014,8 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
       }
     }
     if (CaseAnd(valueList_expr, Xkb::NameDetail::IndicatorNames)) {
-      valueList.indicatorNames.emplace();
+      valueList.indicatorNames.emplace(
+          decltype(valueList.indicatorNames)::value_type());
       auto& indicatorNames = *valueList.indicatorNames;
 
       // indicatorNames
@@ -6008,7 +6026,8 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
       }
     }
     if (CaseAnd(valueList_expr, Xkb::NameDetail::VirtualModNames)) {
-      valueList.virtualModNames.emplace();
+      valueList.virtualModNames.emplace(
+          decltype(valueList.virtualModNames)::value_type());
       auto& virtualModNames = *valueList.virtualModNames;
 
       // virtualModNames
@@ -6019,7 +6038,7 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
       }
     }
     if (CaseAnd(valueList_expr, Xkb::NameDetail::GroupNames)) {
-      valueList.groups.emplace();
+      valueList.groups.emplace(decltype(valueList.groups)::value_type());
       auto& groups = *valueList.groups;
 
       // groups
@@ -6030,7 +6049,7 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
       }
     }
     if (CaseAnd(valueList_expr, Xkb::NameDetail::KeyNames)) {
-      valueList.keyNames.emplace();
+      valueList.keyNames.emplace(decltype(valueList.keyNames)::value_type());
       auto& keyNames = *valueList.keyNames;
 
       // keyNames
@@ -6049,7 +6068,8 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
       }
     }
     if (CaseAnd(valueList_expr, Xkb::NameDetail::KeyAliases)) {
-      valueList.keyAliases.emplace();
+      valueList.keyAliases.emplace(
+          decltype(valueList.keyAliases)::value_type());
       auto& keyAliases = *valueList.keyAliases;
 
       // keyAliases
@@ -6075,7 +6095,8 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
       }
     }
     if (CaseAnd(valueList_expr, Xkb::NameDetail::RGNames)) {
-      valueList.radioGroupNames.emplace();
+      valueList.radioGroupNames.emplace(
+          decltype(valueList.radioGroupNames)::value_type());
       auto& radioGroupNames = *valueList.radioGroupNames;
 
       // radioGroupNames
@@ -6087,7 +6108,7 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
     }
   }
   if (CaseAnd(replies_expr, Xkb::GBNDetail::Geometry)) {
-    replies.geometry.emplace();
+    replies.geometry.emplace(decltype(replies.geometry)::value_type());
     auto& geometry_type = (*replies.geometry).geometry_type;
     auto& geometryDeviceID = (*replies.geometry).geometryDeviceID;
     auto& geometry_sequence = (*replies.geometry).geometry_sequence;
