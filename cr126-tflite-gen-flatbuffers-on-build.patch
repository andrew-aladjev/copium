From 2f539aff85081c08401f81ca2adb6dd77f7ae0cc Mon Sep 17 00:00:00 2001
From: "lauren n. liberda" <lauren@selfisekai.rocks>
Date: Thu, 6 Jun 2024 07:14:34 +0200
Subject: [PATCH] tflite: generate flatbuffers files from schema with flatc

currently the generated flatbuffer files are checked-in to tensorflow source.
this breaks builds with unbundled flatbuffers on any version mismatch,
because flatc-generated headers have static_asserts checking if same version
of library and flatc is used.

Bug: https://github.com/tensorflow/tensorflow/issues/62298
Change-Id: Ie4ed9b2683acdb850e35b3861fcfbc4828f536e7
---
 third_party/flatbuffers/flatbuffer.gni        | 21 ++++-
 third_party/tflite/BUILD.gn                   | 78 +++++++++++++++++++
 .../tflite/accelerator_proto_to_fbs_sed.py    | 21 +++++
 3 files changed, 119 insertions(+), 1 deletion(-)
 create mode 100644 third_party/tflite/accelerator_proto_to_fbs_sed.py

diff --git a/third_party/flatbuffers/flatbuffer.gni b/third_party/flatbuffers/flatbuffer.gni
index 48a5ef4998c..753a3e805ee 100644
--- a/third_party/flatbuffers/flatbuffer.gni
+++ b/third_party/flatbuffers/flatbuffer.gni
@@ -42,6 +42,10 @@
 #       A list of config labels that will be appended to the configs applying
 #       to the source set.
 #
+#   extra_include_dirs (optional)
+#       A list of include dirs (relative to the root path of generated sources)
+#       that will be appended to the configs applying to the source set.
+#
 #   testonly (optional)
 #       Boolean to indicate whether the generated source sets should be labeled
 #       as testonly.
@@ -70,8 +74,10 @@ template("flatbuffer") {
 
     if (defined(invoker.flatc_out_dir)) {
       out_dir = "$root_gen_dir/" + invoker.flatc_out_dir
+      out_dir_relative = rebase_path(out_dir, root_build_dir)
     } else {
       out_dir = "{{source_gen_dir}}"
+      out_dir_relative = out_dir
     }
 
     outputs = [ "$out_dir/{{source_name_part}}_generated.h" ]
@@ -80,7 +86,7 @@ template("flatbuffer") {
       "-c",
       "--keep-prefix",
       "-o",
-      "$out_dir",
+      out_dir_relative,
       "-I",
       rebase_path("//", root_build_dir),
     ]
@@ -123,6 +129,19 @@ template("flatbuffer") {
       configs += invoker.extra_configs
     }
 
+    if (defined(invoker.extra_include_dirs)) {
+      if (defined(invoker.flatc_out_dir)) {
+        _out_dir = "$root_gen_dir/" + invoker.flatc_out_dir
+      } else {
+        _out_dir = root_gen_dir
+      }
+
+      include_dirs = []
+      foreach(include_dir, invoker.extra_include_dirs) {
+        include_dirs += [ _out_dir + "/" + include_dir ]
+      }
+    }
+
     if (defined(invoker.testonly)) {
       testonly = invoker.testonly
     }
diff --git a/third_party/tflite/BUILD.gn b/third_party/tflite/BUILD.gn
index b169638f531..fcca2752c7c 100644
--- a/third_party/tflite/BUILD.gn
+++ b/third_party/tflite/BUILD.gn
@@ -3,10 +3,12 @@
 # found in the LICENSE file.
 
 import("//build/buildflag_header.gni")
+import("//build/compiled_action.gni")
 import("//build/config/android/config.gni")
 import("//build/config/chromeos/ui_mode.gni")
 import("//build/config/sanitizers/sanitizers.gni")
 import("//third_party/cpuinfo/cpuinfo.gni")
+import("//third_party/flatbuffers/flatbuffer.gni")
 import("//third_party/mediapipe/features.gni")
 import("//third_party/protobuf/proto_library.gni")
 import("//third_party/tflite/features.gni")
@@ -33,6 +35,9 @@ proto_library("tflite_op_resolver_proto") {
 
 config("tflite_config") {
   include_dirs = [
+    # must be first to prefer our flatbuffer codegens over checked-in ones
+    "$root_gen_dir/third_party/tflite/src",
+
     "shims",
     "src",
     "src/third_party/xla",
@@ -201,6 +206,78 @@ tflite_static_library("tflite_builtin_op_resolver") {
   conditional_deps = [ ":tflite" ]
 }
 
+# This one flatbuffer is a special boy. The proto is defined in protobuf schema, because both protobuf
+# and flatbuffers are supported, so it has to be first converted into a flatbuffers schema.
+# This is a supported flatc feature, so that's fine, but then the types generated from a simple
+# conversion would conflict with the ones from protobuf. Upstream solves this with a perl string
+# replace one-liner in their bazel workflow.
+# https://github.com/tensorflow/tensorflow/blob/306833457d32dd27a198ec8f6839b4966f941d4d/tensorflow/lite/acceleration/configuration/BUILD#L45-L49
+# Here, this is recreated with a python script.
+compiled_action("tflite_accel_proto_to_fbs_presed") {
+  tool = "//third_party/flatbuffers:flatc"
+  input = "src/tensorflow/lite/acceleration/configuration/configuration.proto"
+  inputs = [ input ]
+  outputs = [ "$root_gen_dir/pre-sed/third_party/tflite/src/tensorflow/lite/acceleration/configuration/configuration.fbs" ]
+  args = [
+    "--proto",
+    "-o",
+    rebase_path(
+        "$root_gen_dir/pre-sed/third_party/tflite/src/tensorflow/lite/acceleration/configuration",
+        root_build_dir),
+    rebase_path(input, root_build_dir),
+  ]
+}
+action("tflite_accel_proto_to_fbs") {
+  script = "accelerator_proto_to_fbs_sed.py"
+  input = "$root_gen_dir/pre-sed/third_party/tflite/src/tensorflow/lite/acceleration/configuration/configuration.fbs"
+  output = "$root_gen_dir/third_party/tflite/src/tensorflow/lite/acceleration/configuration/configuration.fbs"
+  inputs = [ input ]
+  outputs = [ output ]
+  args = [
+    rebase_path(input, root_build_dir),
+    rebase_path(output, root_build_dir),
+  ]
+  deps = [ ":tflite_accel_proto_to_fbs_presed" ]
+}
+flatbuffer("tflite_flatbuffer_accel_header") {
+  sources = [ "$root_gen_dir/third_party/tflite/src/tensorflow/lite/acceleration/configuration/configuration.fbs" ]
+  flatc_out_dir =
+      "third_party/tflite/src/tensorflow/lite/acceleration/configuration"
+  deps = [ ":tflite_accel_proto_to_fbs" ]
+  args = [ "--gen-object-api" ]
+  flatc_include_dirs = [ "src" ]
+  extra_include_dirs = [ "src" ]
+}
+
+flatbuffer("tflite_flatbuffer_regular_headers") {
+  sources = [
+    "src/tensorflow/compiler/mlir/lite/schema/schema.fbs",
+    "src/tensorflow/lite/delegates/gpu/cl/compiled_program_cache.fbs",
+    "src/tensorflow/lite/delegates/gpu/cl/serialization.fbs",
+    "src/tensorflow/lite/delegates/gpu/common/gpu_model.fbs",
+    "src/tensorflow/lite/delegates/gpu/common/task/serialization_base.fbs",
+    "src/tensorflow/lite/schema/conversion_metadata.fbs",
+  ]
+  args = [ "--gen-object-api" ]
+  flatc_include_dirs = [ "src" ]
+  extra_include_dirs = [ "src" ]
+}
+
+# Both paths are referred to in the source code, for legacy reasons.
+copy("tflite_flatbuffer_schema_header_copy") {
+  deps = [ ":tflite_flatbuffer_regular_headers" ]
+  sources = [ "$root_gen_dir/third_party/tflite/src/tensorflow/compiler/mlir/lite/schema/schema_generated.h" ]
+  outputs = [ "$root_gen_dir/third_party/tflite/src/tensorflow/lite/schema/schema_generated.h" ]
+}
+
+group("tflite_flatbuffer_headers") {
+  public_deps = [
+    ":tflite_flatbuffer_accel_header",
+    ":tflite_flatbuffer_regular_headers",
+    ":tflite_flatbuffer_schema_header_copy",
+  ]
+}
+
 source_set("tflite_public_headers") {
   public = [
     "src/tensorflow/compiler/mlir/lite/schema/schema_utils.h",
@@ -232,6 +309,7 @@ source_set("tflite_public_headers") {
     "src/tensorflow/lite/string_util.h",
     "src/tensorflow/lite/util.h",
   ]
+  public_deps = [ ":tflite_flatbuffer_headers" ]
 
   configs += [ ":tflite_flags" ]
 }
diff --git a/third_party/tflite/accelerator_proto_to_fbs_sed.py b/third_party/tflite/accelerator_proto_to_fbs_sed.py
new file mode 100644
index 00000000000..a74c284ad06
--- /dev/null
+++ b/third_party/tflite/accelerator_proto_to_fbs_sed.py
@@ -0,0 +1,21 @@
+# Copyright 2024 The Chromium Authors
+# Use of this source code is governed by a BSD-style license that can be
+# found in the LICENSE file.
+
+import argparse
+
+
+def main():
+    parser = argparse.ArgumentParser()
+    parser.add_argument('input')
+    parser.add_argument('output')
+    args = parser.parse_args()
+
+    with open(args.input, 'rt', encoding='utf-8') as input_file:
+        with open(args.output, 'wt', encoding='utf-8') as output_file:
+            output_file.write(
+                input_file.read().replace('tflite.proto', 'tflite'))
+
+
+if __name__ == '__main__':
+    main()
